load("@rules_distroless//distroless:defs.bzl", "flatten")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_push")
load("@rules_pkg//pkg/private/tar:tar.bzl", "pkg_tar")
load("//sysroots/private:architectures.bzl", "ARCHITECTURES")
load("//sysroots/private:deb.bzl", "deb")
load("//sysroots/private:distros.bzl", "DISTROS")
load("//sysroots/private:ecosystems.bzl", "ECOSYSTEMS", "ECOSYSTEM_VERSIONS")

[
    oci_push(
        name = "push_{distro}_{ecosystem}".format(
            distro = distro,
            ecosystem = ecosystem,
        ),
        image = "{distro}_{ecosystem}".format(
            distro = distro,
            ecosystem = ecosystem,
        ),
        remote_tags = [distro],
        repository = "ghcr.io/malt3/sysroots/{ecosystem}".format(ecosystem = ecosystem),
    )
    for ecosystem in ECOSYSTEMS
    for ecosystem_version in ECOSYSTEM_VERSIONS[ecosystem]
    for distro in DISTROS
]

[
    oci_image_index(
        name = "{distro}_{ecosystem}".format(
            distro = distro,
            ecosystem = ecosystem,
        ),
        images = [
            "image_{distro}_{ecosystem}_{architecture}".format(
                architecture = architecture,
                distro = distro,
                ecosystem = ecosystem,
            )
            for architecture in ARCHITECTURES
        ],
    )
    for ecosystem in ECOSYSTEMS
    for ecosystem_version in ECOSYSTEM_VERSIONS[ecosystem]
    for distro in DISTROS
]

[
    oci_image(
        name = "image_{distro}_{ecosystem}_{architecture}".format(
            architecture = architecture,
            distro = distro,
            ecosystem = ecosystem,
        ),
        architecture = architecture,
        os = "linux",
        tars = [
            "sysroot_{distro}_{ecosystem}_{architecture}".format(
                architecture = architecture,
                distro = distro,
                ecosystem = ecosystem,
            ),
        ],
    )
    for architecture in ARCHITECTURES
    for ecosystem in ECOSYSTEMS
    for ecosystem_version in ECOSYSTEM_VERSIONS[ecosystem]
    for distro in DISTROS
]

[
    flatten(
        name = "sysroot_{distro}_{ecosystem}_{architecture}".format(
            architecture = architecture,
            distro = distro,
            ecosystem = ecosystem,
        ),
        compress = "zstd",
        deduplicate = True,
        tars = deb.base_packages(
            architecture = architecture,
            distro = distro,
        ) + deb.ecosystem_packages(
            architecture = architecture,
            distro = distro,
            ecosystem = ecosystem,
            ecosystem_version = ecosystem_version,
        ) + [
            "symlinks_{ecosystem}".format(ecosystem = ecosystem),
        ],
    )
    for architecture in ARCHITECTURES
    for ecosystem in ECOSYSTEMS
    for ecosystem_version in ECOSYSTEM_VERSIONS[ecosystem]
    for distro in DISTROS
]

[
    pkg_tar(
        name = "symlinks_{ecosystem}".format(ecosystem = ecosystem),
        symlinks = deb.ecosystem_symlinks(
            ecosystem = ecosystem,
            ecosystem_version = ecosystem_version,
        ),
    )
    for ecosystem in ECOSYSTEMS
    for ecosystem_version in ECOSYSTEM_VERSIONS[ecosystem]
]
